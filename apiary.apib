HOST: http://www.google.com/

--- Userific-Server ---

---
Welcome to the documentation for the Userific Server project. Userific provides an way to manage users in your application via a rest api. Userific supports several different backends. No matter which backend is used, the RESTful api is the same for the server
---

--
User Resources
The following is a section of resources related to user management. The userific server supports the following api RESTful endpoints

* [/register](#post-%2Fregister)
* /confirmEmail
* /authenticate
* /generatePasswordResetToken
* /changeEmail
* /changePassword
* /resetPassword

--


Register a new user account

When registering a user account, the following fields are required

* `email`    - the email address used to login to the account
* `password` - the password used to login to the account'


## Valid Registration

If the `register` request completes correctly, a status code of `201` will be returned. The response will include the following fields

```
{
  "_id": "the id of the user record in the backend datastore"
 "email": "the email address stored in the backend datastore. This should be the same as the input email"
 "confirmToken": "the token stored in the backend datastore used to validate email confirmations"
}
```

## Invalid
If either the username or password is missing or invalid, a status code of `409` will be returned. The response will include the following fields

```javascript
{
  "code": "MissingParameter",
  "messge": "register failed",
  "reason": "missing_parameters",
  "errors": [
    { "param": "password", "msg": "password must be at least 4 characters long", "value": "foo" },
    { "param": "email", "msg": "required", "value": "foo.com" } // email address is not a valid address
  ]
}
```

## Internal Errors

If there is an error in the server or an error querying the database, a status cod of `500` will be returned. The response will include the following fields

```javascript
{
  "code": "InternalError",
  "messge": "register failed",
}
```

POST /register
> Content-Type: application/json
{ "email":"foo@example.com", "password": "barPassword" }
< 201
< Content-Type: application/json
{ "_id": "fooUserID", "email": "foo@example.com", "confirmToken": "41a55f3f085b07271a33bf3dd30e079a" }
+++++
< 409
< Content-Type: application/json; charset=utf-8
{"code": "MissingParameter", "message": "Register failed", "errors": [ { "param": "email", "msg": "required" }]}
+++++
< 409
< Content-Type: application/json; charset=utf-8
{"code": "MissingParameter", "message": "Register failed", "errors": [ { "param": "password", "msg": "password must be at least 4 characters long" }]}



Authenticate an existing user account

When authenticating a user account, the following fields are required

* `email`    - the email address used to login to the account
* `password` - the password used to login to the account'

## Valid Authorization

If the `authenticate` request completes correctly, a status code of `200` will be returned.

## Invalid Username or Password
If the username or password is incorrect, a status code of `401` will be returned along with the response body

```javascript
{
    "message": "authenticate failed",
    "reason": "invalid_credentials"
}
```


## Unconfirmed

If the username and password are correct but the user has not yet confirmed the email, a status code of `403` will be returned along with the body

```javascript
{
    "message": "authenticate failed",
    "reason": "unconfirmed"
}
```

## Missing Parameters

If either the username or password is missing, a status code of `409` will be returned.

```javascript
{
    "message": "authenticate failed",
    "reason": "missing_paramters",
    "errors": [
      "param": "email", "msg": "required",
      "param": "password", "msg": "required"
    ]
}
```

Finally if there is an error in the server or an error querying the database, a status cod of `500` will be returned

POST /authenticate
> Content-Type: application/json
{ "email":"foo@example.com", "password": "barPassword" }
< 200
< Content-Type: application/json
{ "_id": "fooUserID", "email": "foo@example.com" }
+++++
< 401
< Content-Type: application/json; charset=utf-8
{"code":"InvalidCredentials","message":"user not found"}
+++++
< 403
< Content-Type: application/json; charset=utf-8
{"code":"NotAuthorized","message":"authenticate failed", "reason": "unconfirmed" }
+++++
< 409
< Content-Type: application/json; charset=utf-8
{"code": "MissingParameter", "message": "authenticate failed", "reason": "missing_parameters", "errors": [ { "param": "email", "msg": "required" }]}
+++++
< 409
< Content-Type: application/json; charset=utf-8
{"code": "MissingParameter", "message": "authenticate failed", "reason": "missing_parameters", "errors": [ { "param": "password", "msg": "required" }]}



Change email for an existing user account
When changing email, the following fields are required

* `currentEmail` - the email address of the account
* `password`     - the password used to login to the account
* `newEmail`     - the new email address of the account


## Success

If the `changeEmail` request completes correctly, a status code of `200` will be returned. You can the call the authenticate route using the new email address and password to login


## Missing Parameter

If one or more of the posted parameters is either missing or incorrect, a status code of `409` will be returned. The response will include the following fields

```javascript
{
  "code": "MissingParameter",
  "message": "changeEmail failed",
  "errors": [
    { "param": "currentEmail", "msg": "required" },
    { "param": "newEmail", "msg": "required" },
    { "param": "password", "msg": "required" }
  ]
}
```

## Invalid Password

If the supplied password is not correct for the supplied `currentEmail` parameter, a status code of `401` will be returned. The response will include the following fields

```javascript
{
  "code":"InvalidCredentials",
  "message":"user not found"
}
```

POST /changeEmail
> Content-Type: application/json
{"currentEmail":"foo@example.com", "password": "fooPassword", "newEmail": "newEmail2@example.com" }
< 200
< Content-Type: application/json; charset=utf-8
{ "_id": "fooUserID", "email": "newEmail2@example.com" }
+++++
< 401
< Content-Type: application/json; charset=utf-8
{"code":"InvalidCredentials","message":"user not found"}
+++++
< 409
< Content-Type: application/json; charset=utf-8
{"code": "MissingParameter", "message": "changeEmail failed", "errors": [ { "param": "currentEmail", "msg": "required" }, { "param": "newEmail", "msg": "required" }, { "param": "password", "msg": "required" }]}


Change password for an existing user account

When changing password, the following fields are required

* `currentPassword` - the password address of the account
* `email`           - the email address used to login to the account
* `newpassword`     - the new password of the account


## Success

If the `changePassword` request completes correctly, a status code of `200` will be returned. You can then call the authenticate route using the email address and new password to login. On succesful change password requests, the response will include the following fields

```javascript
{
  "_id": "fooUserID",
  "email": "foo@example.com"
}
```

## Invalid Password

If the supplied `currentPassword` is not correct for the supplied `email` parameter, a status code of `401` will be returned. The response will include the following fields

```javascript
{
  "code":"InvalidCredentials",
  "message":"user not found"
}
```

## Missing Parameters

If any of the required fields are either missing or invalid, a status code of `409` will be returned. The response will include the following fields

```javascript
{
 "code": "MissingParameter",
 "message": "changePassword failed",
 "errors": [
   { "param": "currentPassword", "msg": "required" },
   { "param": "newPassword", "msg": "required" },
   { "param": "email", "msg": "required" }
 ]
}
```

POST /changePassword
> Content-Type: application/json
{ "email":"foo@example.com", "currentPassword": "fooPassword", "newPassword": "newBarPassword2" }
< 200
< Content-Type: application/json
{ "_id": "fooUserID", "email": "foo@example.com" }
+++++
< 401
< Content-Type: application/json; charset=utf-8
{"code":"InvalidCredentials","message":"user not found"}
+++++
< 409
< Content-Type: application/json; charset=utf-8
{"code": "MissingParameter", "message": "changePassword failed", "errors": [ { "param": "currentPassword", "msg": "required" }, { "param": "newPassword", "msg": "required" }, { "param": "email", "msg": "required" }]}


Generate a password reset token for a given account. When a user forgets their login password and needs to reset the password to a new one, the system must first confirm the user another way. One possibility is via their email address. the `/generatePasswordResetToken` api endpoint allows a user to begin the reset process. The backend will generate a reset token and associate it with the user in the database. Since the userific server is intended to be used as a public api, the reset token is not returned back in the response body. To email the reset token to the user, your web server must query the database itself a fetch the reset token.

When generating a password reset token, the following fields are required

* `email`           - the email address used to login to the account

## Success

If the `generatePasswordResetToken` request completes correctly, a status code of `200` will be returned. You can then fetch the reset token from the data-store and email it to the user. The response will include the following fields

```javascript
{
  "_id": "fooUserID",
  "email": "foo@example.com"
}
```

## Missing Parameters

If any of the required fields are either missing or invalid, a status code of `409` will be returned. The response will include the following fields

```javascript
{
 "code": "MissingParameter",
 "message": "generatePasswordResetToken failed",
 "reason": "missing_parameter",
 "errors": [
   { "param": "email", "msg": "required" }
 ]
}
```

## Unconfirmed User

If the endpoint is called with an email address for a user who has registered but not yet confirmed their email, a status code of `403` will be returned. The response body will include the following fields:

```javascript
{
 "code": "NotAuthorized",
 "message": "generatePasswordResetTokenFailed",
 "reason": "unconfirmed"
}
```

POST /generatePasswordResetToken
> Content-Type: application/json
{ "email":"foo@example.com" }
< 200
< Content-Type: application/json
{ "_id": "fooUserID", "email": "foo@example.com" }
+++++
< 403
< Content-Type: application/json; charset=utf-8
{"code":"Not Authorized","message":"generatePasswordResetTokenFailed", "reason": "unconfirmed" }
+++++
< 409
< Content-Type: application/json; charset=utf-8
{"code": "MissingParameter", "message": "generatePasswordResetTokenFailed", "errors": [ { "param": "email", "msg": "required" } ] }

Ping the server to make sure it online
GET /ping
< 200
< Content-Type: application/json
{ "message": "pong"}
